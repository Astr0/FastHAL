// Timer template
// Replace 1 to timer num

#ifndef AVR_TIMER1_H_
#define AVR_TIMER1_H_
#define FH_TIMER1#if defined(TCNT1) && (!defined(FH_TIMER1) || (defined(TCCR1A) && defined(TCCR1B)))
#include "../../utils/functions.h"
#include "timer.h"
#include "interrupts.h"

namespace fasthal{
	// Clock Source	#if defined(FH_TIMER0)		#if !defined(__AVR_ATmega128__)	#define FH_TIMER1_CS_EXT	#endif		#elif defined(FH_TIMER1)		#define FH_TIMER1_CS_EXT		#elif defined(FH_TIMER2)	#if defined(__AVR_ATmega128__)	#define FH_TIMER1_CS_EXT	#endif	#endif		#ifdef FH_TIMER1_CS_EXT	// CPU Specific	FH_TIMER_DECLARE_CS_ENUM_3_EXT(Timer1Cs, CS10, CS11, CS12);	#else	FH_TIMER_DECLARE_CS_ENUM_3(Timer1Cs, CS10, CS11, CS12);	#endif			// Waveform generation mode	#if defined(WGM10) && defined(WGM11)	#if defined(WGM13)	FH_TIMER_DECLARE_WGM_ENUM_4(Timer1Wgm, WGM10, WGM11, WGM12, WGM13);	#elif defined(WGM12)	FH_TIMER_DECLARE_WGM_ENUM_3(Timer1Wgm, WGM10, WGM11, WGM12);	#else	FH_TIMER_DECLARE_WGM_ENUM_2(Timer1Wgm, WGM10, WGM11);	#endif	#endif		// Compare mode A	#if defined(COM10) && defined(COM11)	#define FH_COM1A0 COM10	#define FH_COM1A1 COM11	#elif defined(COM1A0) && defined(COM1A1)	#define FH_COM1A0 COM1A0	#define FH_COM1A1 COM1A1	#endif		#if defined(FOC1A)	#define FH_FOC1A FOC1A	#elif defined(FOC1)	#define FH_FOC1A FOC1	#endif	#if defined(FH_COM1A0) && defined(FH_COM1A1)	FH_TIMER_DECLARE_COM_ENUM(Timer1ComA, FH_COM1A0, FH_COM1A1);	#endif		// compare mode B	#if defined(COM1B0) && defined(COM1B1)	FH_TIMER_DECLARE_COM_ENUM(Timer1ComB, COM1B0, COM1B1);	#endif		// compare mode C	#if defined(COM1C0) && defined(COM1C1)	FH_TIMER_DECLARE_COM_ENUM(Timer1ComC, COM1C0, COM1C1);	#endif		// interrupts - enable	enum class Timer1I: uint8_t{		Overflow = (1 << TOIE1)				#if defined(OCIE1A)		, OuputCompareA = (1 << OCIE1A)		#elif defined(OCIE1)		, OuputCompareA = (1 << OCIE1)		#endif				#if defined(OCIE1B)		, OutputCompareB = (1 << OCIE1B)		#endif				#if defined(OCIE1C)		, OutputCompareC = (1 << OCIE1C)		#endif	};		// interrupts - flag	enum class Timer1F: uint8_t{		Overflow = (1 << TOV1)				#if defined(OCF1A)		, OuputCompareA = (1 << OCF1A)		#elif defined(OCF1)		, OuputCompareA = (1 << OCF1)		#endif				#if defined(OCF1B)		, OuputCompareB = (1 << OCF1B)		#endif		#if defined(OCF1C)		, OuputCompareC = (1 << OCF1C)		#endif	};	// wrap registers	namespace priv{		FH_WRAPVARIABLE(TCNTReg1, TCNT1)				#if defined(TCCR)		FH_WRAPVARIABLE(TCCRReg1, TCCR1)		#endif		#if defined(TCCR1A)		FH_WRAPVARIABLE(TCCRAReg1, TCCR1A)		#endif				#if defined(TCCR1B)		FH_WRAPVARIABLE(TCCRBReg1, TCCR1B)		#endif				#if defined(TCCR1C)		FH_WRAPVARIABLE(TCCRCReg1, TCCR1C)		#endif				#if defined(TIMSK1)		FH_WRAPVARIABLE(TIMSKReg1, TIMSK1)		#else		FH_WRAPVARIABLE(TIMSKReg1, TIMSK)		#endif				#if defined(TIFR1)		FH_WRAPVARIABLE(TIFRReg1, TIFR1)		#else		FH_WRAPVARIABLE(TIFRReg1, TIFR)		#endif				#if defined(OCR1A)		FH_WRAPVARIABLE(OCRAReg1, OCR1A)		#elif defined(OCR1)		FH_WRAPVARIABLE(OCRAReg1, OCR1)		#endif				#if defined(OCR1B)		FH_WRAPVARIABLE(OCRBReg1, OCR1B)		#endif				#if defined(OCR1C)		FH_WRAPVARIABLE(OCRCReg1, OCR1C)		#endif				// CS Reg		#if defined(TCCR1B)		typedef TCCRBReg1 TCCRCsReg1;		#else		typedef TCCRReg1 TCCRCsReg1;		#endif		// WGM0/1 Regs		#if defined(WGM10) && defined(WGM11)		#if defined(WGM12)		typedef TCCRAReg1 TCCRWgm0Reg1;		typedef TCCRBReg1 TCCRWgm1Reg1;		#else		typedef TCCRReg1 TCCRWgmReg1;		#endif		#endif				// COM regs		#if defined(TCCR1A)		typedef TCCRAReg1 TCCRComAReg1;		typedef TCCRAReg1 TCCRComBReg1;		typedef TCCRAReg1 TCCRComCReg1;		#elif defined(TCCR1)		typedef TCCRReg1 TCCRComAReg1;		#endif		// FOC regs		#if defined(TCCR1C)				typedef TCCRCReg1 TCCRFocAReg1;		typedef TCCRCReg1 TCCRFocBReg1;		typedef TCCRCReg1 TCCRFocCReg1;				#elif defined(FH_TIMER0) || defined(FH_TIMER2)		// TCCRB or TCCR		#if defined(TCCR1B)		typedef TCCRBReg1 TCCRFocAReg1;		typedef TCCRBReg1 TCCRFocBReg1;		#elif defined(TCCR1)		typedef TCCRReg1 TCCRFocAReg1;		typedef TCCRReg1 TCCRFocBReg1;		#endif				#elif defined(FH_TIMER1)				// Mega8/32 have it TCCR1A		typedef TCCRAReg1 TCCRFocAReg1;		typedef TCCRAReg1 TCCRFocBReg1;				#endif	}			// The big timer	struct Timer1:	public AvrTimerCS<priv::TCCRCsReg1, Timer1Cs, Timer1CsMask, priv::TCNTReg1>	, public InterruptControl<priv::TIMSKReg1, Timer1I>	, public InterruptFlags<priv::TIFRReg1, Timer1F>		#if defined(WGM10) && defined(WGM11)	// has WGM.	#if defined(WGM12)	, public AvrTimerWGM2<priv::TCCRWgm0Reg1, priv::TCCRWgm1Reg1, Timer1Wgm, Timer1WgmMask0, Timer1WgmMask1>	#else	, public AvrTimerWGM<priv::TCCRWgmReg1, Timer1Wgm, Timer1WgmMask>	#endif	#endif		#if defined(FH_COM1A0) && defined(FH_COM1A1)	// has A	, public AvrTimerComA<priv::TCCRComAReg1, Timer1ComA, Timer1ComAMask, priv::OCRAReg1>	#endif	#if defined(FH_FOC1A)	// can force A	, public AvrTimerForceA<priv::TCCRFocAReg1, FH_FOC1A>	#endif		#if defined(COM1B0) && defined(COM1B1)	// has B	, public AvrTimerComB<priv::TCCRComBReg1, Timer1ComB, Timer1ComBMask, priv::OCRBReg1>	#endif	#if defined(FOC1B)	// can force B	, public AvrTimerForceB<priv::TCCRFocBReg1, FOC1B>	#endif
		#if defined(COM1C0) && defined(COM1C1)	// has C	, public AvrTimerComC<priv::TCCRComCReg1, Timer1ComC, Timer1ComCMask, priv::OCRCReg1>	#endif	#if defined(FOC1C)	// can force C	, public AvrTimerForceC<priv::TCCRFocCReg1, FOC1C>	#endif
	{
	};
}


#endif // defined TCCR

#undef FH_TIMER1

#endif /* TIMER0_H_ */
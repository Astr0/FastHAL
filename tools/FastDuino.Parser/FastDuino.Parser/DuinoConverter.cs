namespace FastDuino.Parser
{
    public class DuinoConverter
    {
        public static string Convert(string input)
        {
            var s = input;
            s = s
                .Replace("Pins_Arduino_h", "FH_PINS_FASTDUINO_H_")
                .Replace("pins_arduino.h", "pins_fastduino.hpp")
                .Replace("avr/pgmspace.h", "#include", ">", "")
                .Replace("ARDUINO_MAIN", "#ifdef", null, "#if (2 + 2 == 4)")
                .Replace("extern const uint8_t PROGMEM analog_pin_to_channel_PGM[];", "")
                .Replace("port_to_mode_PGM", "const", ";", "")
                .Replace("port_to_output_PGM", "const", ";", "")
                .Replace("port_to_input_PGM", "const", ";", "")
                .Replace("pgm_read_byte", "")
                .Replace("PROGMEM ", "")
                .Replace("digital_pin_to_port_PGM", "const", ";", ReplacePorts)
                .Replace("digital_pin_to_bit_mask_PGM", "const", ";", ReplaceBitMask)
                .Replace("digital_pin_to_timer_PGM", "const", ";", ReplaceTimers)
                .Replace("analog_pin_to_channel_PGM + (P)", "ino_mux[(P)]")
                .Replace("analog_pin_to_channel_PGM", "ino_mux")
                .Replace("const", "constexpr")
                .Replace("uint8_t", "std::uint8_t")
                .Replace("uint16_t", "std::uint16_t");


            s = "// ********************* Generated by a tool *********************\n" + s;
            return s;
        }

        private static string GetTimerNum(int timer, int oc)
        {
            return $"({timer}'{oc})";
        }

        private static string ReplaceTimers(string arg)
        {
            arg = arg
                .Replace("digital_pin_to_timer_PGM", "ino_timer_oc_num")
                .Replace("NOT_ON_TIMER", "255");
            for (var timer = 0; timer < 6; timer++)
            {
                for (var oc = 0; oc < 3; oc++)
                {
                    var timerName = "TIMER" + timer + (char) ('A' + oc);
                    arg = arg.Replace(timerName, GetTimerNum(timer, oc));
                }
                arg = arg.Replace("TIMER" + timer, GetTimerNum(timer, 0));
            }
            return arg;
        }

        private static string ReplaceBitMask(string arg)
        {
            return arg
                .Replace("digital_pin_to_bit_mask_PGM", "ino_pin_num")
                .Replace("_BV(", "")
                .Replace(")", "");
        }

        private static string ReplacePorts(string arg)
        {
            return arg
                .Replace("digital_pin_to_port_PGM", "ino_port_num")
                .Replace("PA", "1")
                .Replace("PB", "2")
                .Replace("PC", "3")
                .Replace("PD", "4")
                .Replace("PE", "5")
                .Replace("PF", "6")
                .Replace("PG", "7")
                .Replace("PH", "8")
                .Replace("PJ", "9")
                .Replace("PK", "10")
                .Replace("PL", "11");
        }
    }
}
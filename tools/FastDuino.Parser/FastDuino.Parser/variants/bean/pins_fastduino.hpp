// ********************* Generated by a tool *********************
/*
  pins_fastduino.hpp - Pin definition functions for Arduino
  Part of Arduino - http://www.arduino.cc/

  Copyright (c) 2007 David A. Mellis

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA

  $Id: wiring.h 249 2007-02-03 16:52:51Z mellis $
*/

#ifndef FH_PINS_FASTDUINO_H_
#define FH_PINS_FASTDUINO_H_



#define FH_NUM_DIGITAL_PINS            6
#define FH_NUM_ANALOG_INPUTS           2
#define analogInputToDigitalPin(p)  ((p < 6) ? (p) + 14 : -1)

#if defined(__AVR_ATmega8__)
#define digitalPinHasPWM(p)         ((p) == 9 || (p) == 10 || (p) == 11)
#else
#define digitalPinHasPWM(p)         ((p) == 3 || (p) == 5 || (p) == 6 || (p) == 9 || (p) == 10 || (p) == 11)
#endif

#define IS_BEAN (1)

static constexpr uint8_t SS   = 2;
static constexpr uint8_t MOSI = 3;
static constexpr uint8_t MISO = 4;
static constexpr uint8_t SCK  = 5;

static constexpr uint8_t SDA = 18;
static constexpr uint8_t SCL = 19;
static constexpr uint8_t LED_BUILTIN = 13;

static constexpr uint8_t A0 = 18; // remapped for Bean (swapped with A4)
static constexpr uint8_t A1 = 19; // remapped for Bean (swapped with A5)
static constexpr uint8_t A2 = 16;
static constexpr uint8_t A3 = 17;
static constexpr uint8_t A4 = 14; // remapped for Bean (swapped with A0)
static constexpr uint8_t A5 = 15; // remapped for Bean (swapped with A1)
static constexpr uint8_t A6 = 20;
static constexpr uint8_t A7 = 21;

static constexpr uint8_t CC_INTERRUPT_PIN = 13;

#define digitalPinToPCICR(p)    (((p) >= 0 && (p) <= 21) ? (&PCICR) : ((uint8_t *)0))
#define digitalPinToPCICRbit(p) (((p) <= 7) ? 2 : (((p) <= 13) ? 0 : 1))
#define digitalPinToPCMSK(p)    (((p) <= 7) ? (&PCMSK2) : (((p) <= 13) ? (&PCMSK0) : (((p) <= 21) ? (&PCMSK1) : ((uint8_t *)0))))
#define digitalPinToPCMSKbit(p) (((p) <= 7) ? (p) : (((p) <= 13) ? ((p) - 8) : ((p) - 14)))

#if (2 + 2 == 4)

// On the Arduino board, digital pins are also used
// for the analog output (software PWM).  Analog input
// pins are a separate set.

// ATMEL ATMEGA8 & 168 / ARDUINO
//
//                  +-\/-+
//            PC6  1|    |28  PC5 (AI 5)
//      (D 0) PD0  2|    |27  PC4 (AI 4)
//      (D 1) PD1  3|    |26  PC3 (AI 3)
//      (D 2) PD2  4|    |25  PC2 (AI 2)
// PWM+ (D 3) PD3  5|    |24  PC1 (AI 1)
//      (D 4) PD4  6|    |23  PC0 (AI 0)
//            VCC  7|    |22  GND
//            GND  8|    |21  AREF
//            PB6  9|    |20  AVCC
//            PB7 10|    |19  PB5 (D 13)
// PWM+ (D 5) PD5 11|    |18  PB4 (D 12)
// PWM+ (D 6) PD6 12|    |17  PB3 (D 11) PWM
//      (D 7) PD7 13|    |16  PB2 (D 10) PWM
//      (D 8) PB0 14|    |15  PB1 (D 9) PWM
//                  +----+
//
// (PWM+ indicates the additional PWM pins on the ATmega168.)

// ATMEL ATMEGA1280 / ARDUINO
//
// 0-7 PE0-PE7   works
// 8-13 PB0-PB5  works
// 14-21 PA0-PA7 works
// 22-29 PH0-PH7 works
// 30-35 PG5-PG0 works
// 36-43 PC7-PC0 works
// 44-51 PJ7-PJ0 works
// 52-59 PL7-PL0 works
// 60-67 PD7-PD0 works
// A0-A7 PF0-PF7
// A8-A15 PK0-PK7


// these arrays map port names (e.g. port B) to the
// appropriate addresses for various functions (e.g. reading
// and writing)






constexpr std::uint8_t ino_port_num[] = {
	4, /* 0 */ // Swapped With D6 (requires mask change, but no port change)
	2,         // Swapped with D9 (no mask change)
	2,         // Swapped with D10 (no mask change)
	2,         // Swapped with D11 (no mask change)
	2,         // Swapped with D12 (no mask change)
	2,         // Swapped with D13 (no mask change)
	4,         // Swapped with D0 (requires mask change, but no port change)
	4,
	2, /* 8 */
	4,         // Swapped with D1 (no mask change)
	4,         // Swapped with D2 (no mask change)
	4,         // Swapped with D3 (no mask change)
	4,         // Swapped with D4 (no mask change)
	4,         // Swapped with D5 (no mask change)
	3, /* 14 */
	3,
	3,
	3,
	3,
	3,
};

constexpr std::uint8_t ino_pin_num[] = {
	6, /* 0, port D */  // swapped for Bean with D6
	1,
	2,
	3,
	4,
	5,
	0,  // Swapped with Bean for D0
	7,
	0, /* 8, port B */
	1,
	2,
	3,
	4,
	5,
	0, /* 14, port C */
	1,
	2,
	3,
	4,
	5,
};

constexpr std::uint8_t ino_timer_oc_num[] = {
	(0'0), /* 0 - port D */ // Swapped With D6
	(1'0),      // Swapped with D9
	(1'1),      // Swapped with D10
	(2'0),      // Swapped with D11
	255, // Swapped with D12
	255, // Swapped with D13
	255, // Swapped with D0
	255,
	255, /* 8 - port B */
	255, // Swapped with D1
	255, // Swapped with D2
	(2'1),      // Swapped with D3
	255, // Swapped with D4
	(0'1),      // Swapped with D5
	255, /* 14 - port C */
	255,
	255,
	255,
	255,
	255,
};

#endif  // ARDUINO_MAIN
#endif  // FH_PINS_FASTDUINO_H_

// ********************* Generated by a tool *********************
// Pins definitions for Atmega644/1284P
// Original file from Maniacbug's Mighty-1284 core and mods by Leonardo Miliani
// Modded by Felix Rusu - LowPowerLab.com

#ifndef FH_PINS_FASTDUINO_H_
#define FH_PINS_FASTDUINO_H_



//                         ATMEL ATMEGA644P/1284P
//
//                               +---\/---+
//            PCINT8/(D0 ) PB0  1|        |40  PA0 (A0 / D24)/PCINT0
//            PCINT9/(D1 ) PB1  2|        |39  PA1 (A1 / D25)/PCINT1
//      PCINT10/INT2 (D2 ) PB2  3|        |38  PA2 (A2 / D26)/PCINT2
//      PCINT11/OC0A (D3 ) PB3  4|~       |37  PA3 (A3 / D27)/PCINT3
//   PCINT12/0C0B/SS (D4 ) PB4  5|~       |36  PA4 (A4 / D28)/PCINT4
//      PCINT13/MOSI (D5 ) PB5  6|        |35  PA5 (A5 / D29)/PCINT5
// PCINT14/OC3A/MISO (D6 ) PB6  7|~*      |34  PA6 (A6 / D30)/PCINT6
//  PCINT15/OC3B/SCK (D7 ) PB7  8|~*      |33  PA7 (A7 / D31)/PCINT7
//                         RST  9|        |32  AREF
//                         VCC 10|        |31  GND 
//                         GND 11|        |30  AVCC
//                       XTAL2 12|        |29  PC7 (D23) TOSC2/PCINT23
//                       XTAL1 13|        |28  PC6 (D22) TOSC1/PCINT22
//       PCINT24/RX0 (D8 ) PD0 14|        |27  PC5 (D21) TDI/PCINT21
//       PCINT25/TX0 (D9 ) PD1 15|        |26  PC4 (D20) TDO/PCINT20
//  PCINT26/INT0/RX1 (D10) PD2 16|        |25  PC3 (D19) TMS/PCINT19
//  PCINT27/INT1/TX1 (D11) PD3 17|        |24  PC2 (D18) TCK/PCINT18
//      PCINT28/OC1B (D12) PD4 18|~       |23  PC1 (D17) SDA/PCINT17
//      PCINT29/OC1A (D13) PD5 19|~       |22  PC0 (D16) SCL/PCINT16
//      PCINT30/OC2B (D14) PD6 20|~      ~|21  PD7 (D15) OC2A/PCINT31
//                               +--------+
//
// *: OC3A/OC3B (and corresponding PWMs) are only present on Atmega1284
// PCINT15-8: D7-0    : bit 1
// PCINT31-24: D15-8  : bit 3
// PCINT23-16: D23-16 : bit 2
// PCINT7-0: D31-24   : bit 0

#define FH_NUM_DIGITAL_PINS            31
#define FH_NUM_ANALOG_INPUTS           8
#define analogInputToDigitalPin(p)  ((p < FH_NUM_ANALOG_INPUTS) ? (p) + 24 : -1)

#if defined(__AVR_ATmega1284P__)
#define digitalPinHasPWM(p)         ((p) == 3 || (p) == 4 || (p) == 6 || (p) == 7 || (p) == 12 || (p) == 13 || (p) == 14 || (p) == 15)
#else
#define digitalPinHasPWM(p)         ((p) == 3 || (p) == 4 || (p) == 12 || (p) == 13 || (p) == 14 || (p) == 15)
#endif

static constexpr uint8_t SS   = 4;
static constexpr uint8_t MOSI = 5;
static constexpr uint8_t MISO = 6;
static constexpr uint8_t SCK  = 7;

static constexpr uint8_t SDA = 17;
static constexpr uint8_t SCL = 16;
//static constexpr uint8_t LED = 15;

static constexpr uint8_t A0 = 24;
static constexpr uint8_t A1 = 25;
static constexpr uint8_t A2 = 26;
static constexpr uint8_t A3 = 27;
static constexpr uint8_t A4 = 28;
static constexpr uint8_t A5 = 29;
static constexpr uint8_t A6 = 30;
static constexpr uint8_t A7 = 31;

#define digitalPinToPCICR(p)    (((p) >= 0 && (p) < FH_NUM_DIGITAL_PINS) ? (&PCICR) : ((uint8_t *)0))
#define digitalPinToPCICRbit(p) (((p) <= 7) ? 1 : (((p) <= 15) ? 3 : (((p) <= 23) ? 2 : 0)))
#define digitalPinToPCMSK(p)    (((p) <= 7) ? (&PCMSK2) : (((p) <= 13) ? (&PCMSK0) : (((p) <= 21) ? (&PCMSK1) : ((uint8_t *)0))))
#define digitalPinToPCMSKbit(p) ((p) % 8)

#if (2 + 2 == 4)

#define PA 1
#define PB 2
#define PC 3
#define PD 4

// these arrays map port names (e.g. port B) to the
// appropriate addresses for various functions (e.g. reading
// and writing)






constexpr std::uint8_t ino_port_num[] =
{
	2, /* 0 */
	2,
	2,
	2,
	2,
	2,
	2,
	2,
	4, /* 8 */
	4,
	4,
	4,
	4,
	4,
	4,
	4,
	3, /* 16 */
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	1, /* 24 */
	1,
	1,
	1,
	1,
	1,
	1,
	1  /* 31 */
};

constexpr std::uint8_t ino_pin_num[] =
{
	0, /* 0, port B */
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	0, /* 8, port D */
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	0, /* 16, port C */
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	0, /* 24, port A */
	1,
	2,
	3,
	4,
	5,
	6,
	7
};

constexpr std::uint8_t ino_timer_oc_num[] =
{
	255, 	/* 0  - PB0 */
	255, 	/* 1  - PB1 */
	255, 	/* 2  - PB2 */
	(0'0),		/* 3  - PB3 */
	(0'1),		/* 4  - PB4 */
	255, 	/* 5  - PB5 */
#if defined(__AVR_ATmega1284P__) 
	(3'0),		/* 6  - PB6 */
	(3'1),		/* 7  - PB7 */
#else
	255,   /* 6  - PB6 */
	255,   /* 7  - PB7 */
#endif
	255, 	/* 8  - PD0 */
	255, 	/* 9  - PD1 */
	255, 	/* 10 - PD2 */
	255, 	/* 11 - PD3 */
	(1'1),     	/* 12 - PD4 */
	(1'0),     	/* 13 - PD5 */
	(2'1),     	/* 14 - PD6 */
	(2'0),     	/* 15 - PD7 */
	255, 	/* 16 - PC0 */
	255,   /* 17 - PC1 */
	255,   /* 18 - PC2 */
	255,   /* 19 - PC3 */
	255,   /* 20 - PC4 */
	255,   /* 21 - PC5 */
	255,   /* 22 - PC6 */
	255,   /* 23 - PC7 */
	255,   /* 24 - PA0 */
	255,   /* 25 - PA1 */
	255,   /* 26 - PA2 */
	255,   /* 27 - PA3 */
	255,   /* 28 - PA4 */
	255,   /* 29 - PA5 */
	255,   /* 30 - PA6 */
	255    /* 31 - PA7 */
};

#endif // ARDUINO_MAIN

#endif // FH_PINS_FASTDUINO_H_
// vim:ai:cin:sts=2 sw=2 ft=cpp
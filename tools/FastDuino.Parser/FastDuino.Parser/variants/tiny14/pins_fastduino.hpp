// ********************* Generated by a tool *********************
/*
  pins_arduino.c - pin definitions for the Arduino board
  Part of Arduino / Wiring Lite

  Copyright (c) 2005 David A. Mellis

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA

  $Id: pins_arduino.c 565 2009-03-25 10:50:00Z dmellis $

  Modified 28-08-2009 for attiny84 R.Wiersma
  Modified 09-10-2009 for attiny45 A.Saporetti
*/

#ifndef FH_PINS_FASTDUINO_H_
#define FH_PINS_FASTDUINO_H_



// ATMEL ATTINY84 / ARDUINO
//
//                           +-\/-+
//                     VCC  1|    |14  GND
//             (D 10)  PB0  2|    |13  AREF (D  0)
//             (D  9)  PB1  3|    |12  PA1  (D  1) 
//                     PB3  4|    |11  PA2  (D  2) 
//  PWM  INT0  (D  8)  PB2  5|    |10  PA3  (D  3) 
//  PWM        (D  7)  PA7  6|    |9   PA4  (D  4) 
//  PWM        (D  6)  PA6  7|    |8   PA5  (D  5)        PWM
//                           +----+

constexpr static std::uint8_t A0 = 0;
constexpr static std::uint8_t A1 = 1;
constexpr static std::uint8_t A2 = 2;
constexpr static std::uint8_t A3 = 3;
constexpr static std::uint8_t A4 = 4;
constexpr static std::uint8_t A5 = 5;
constexpr static std::uint8_t A6 = 6;
constexpr static std::uint8_t A7 = 7;

#define digitalPinToPCICR(p)    ( ((p) >= 0 && (p) <= 10) ? (&GIMSK) : ((std::uint8_t *)0) )
#define digitalPinToPCICRbit(p) ( ((p) <= 7) ? PCIE0 : PCIE1 )
#define digitalPinToPCMSK(p)    ( ((p) <= 7) ? (&PCMSK0) : (((p) <= 10) ? (&PCMSK1) : ((std::uint8_t *)0)) )
#define digitalPinToPCMSKbit(p) ( ((p) <= 7) ? (p) : (10 - (p)) )

#if (2 + 2 == 4)

// these arrays map port names (e.g. port B) to the
// appropriate addresses for various functions (e.g. reading
// and writing)






constexpr std::uint8_t ino_port_num[] = 
{
  1, /* 0 */
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2, /* 8 */
  2,
  2,
};

constexpr std::uint8_t ino_pin_num[] = 
{
  0, /* port A */
  1,
  2,
  3,
  4,
  5, 
  6,
  7,
  2, /* port B */
  1,
  0,
};

constexpr std::uint8_t ino_timer_oc_num[] = 
{
  0,
  0,
  0,
  0, 
  0,
  (1 * 3 + 1), /* OC1B */
  (1 * 3 + 0), /* OC1A */
  (0 * 3 + 1), /* OC0B */
  (0 * 3 + 0), /* OC0A */
  0,
  0,
};

#endif

#endif
